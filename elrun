#!/usr/bin/env sh

# SPDX-FileCopyrightText: 2022 Saulius Krasuckas
# SPDX-License-Identifier: BlueOak-1.0.0

 SCRIPT_NAME="$0"

cluster__up()
{
    docker compose up -d
    cluster_ps
}

cluster__down()
{
    docker compose down "$@"
    docker compose -f docker-compose.offsite.yml down "$@"
    cluster_ps
}

cluster_build()
{
    docker compose pull
    docker compose -f docker-compose.offsite.yml pull
    docker compose build
    docker compose -f docker-compose.offsite.yml build
}

cluster_es03_down()
{
    docker compose stop es03
}

cluster_es03_offsite_down()
{
   #docker compose -f docker-compose.offsite.yml stop es03-offsite
    docker compose -f docker-compose.offsite.yml down
}

cluster_es03_offsite_up()
{
    docker compose -f docker-compose.offsite.yml up -d
}

cluster_ps()
{
    docker compose ps
    docker compose -f docker-compose.offsite.yml ps
}

cluster_watch()
{
    watch -n 0.2 "$SCRIPT_NAME list_nodes; echo; $SCRIPT_NAME list_shards"
}

create_index()
{
    INDEX_NAME=${1:-sampleindex}
    curl -sX PUT "localhost:9200/$INDEX_NAME?pretty"
}

exclude_node()
{
    if [ "$1" = "" ]; then
        NODE_NAME="null"
    else
        NODE_NAME="\"$1\""
    fi

    curl -sX PUT "localhost:9200/_cluster/settings?pretty" \
        -H "Content-Type: application/json; charset=utf-8" \
        -d @- <<- \
	----------------------------------------------------------
	{
	  "transient": {
	    "cluster.routing.allocation.exclude._name": $NODE_NAME
	  }
	}
	----------------------------------------------------------
}

explain_shard_alloc()
{
    INDEX_NAME=${1:-sampleindex}
    SHARD_NUMB=${2:-0}
    SHARD_PRIM=${3:-true}
    CURRE_NODE=${4:-es01}

    if [ "$5" = "disk" ]; then
        INCLU_DISK="include_disk_info&"
    fi

    curl -sX GET "localhost:9200/_cluster/allocation/explain?${INCLU_DISK}pretty" \
        -H "Content-Type: application/json; charset=utf-8" \
        -d @- <<- \
	----------------------------------------------------------
	{
	  "index": "$INDEX_NAME",
	  "shard": $SHARD_NUMB,
	  "primary": $SHARD_PRIM,
	  "current_node": "$CURRE_NODE"
	}
	----------------------------------------------------------
}

list_cluster_health()
{
    curl -sX GET "localhost:9200/_cluster/health?pretty"
}

list_cluster_pending()
{
    curl -sX GET "localhost:9200/_cluster/pending_tasks?pretty"
}

list_cluster_settings()
{
    if [ "$1" = "defaults" ]; then
        INCLUDE_DEFAULTS="include_defaults&"
    fi

    curl -sX GET "localhost:9200/_cluster/settings?${INCLUDE_DEFAULTS}pretty"
}

list_cluster_state()
{
    curl -sX GET "localhost:9200/_cluster/state?pretty"
}

list_cluster_stats()
{
    curl -sX GET "localhost:9200/_cluster/stats?human&pretty"
}

list_disk()
{
    curl -sX GET "localhost:9200/_cat/allocation?v"
}

list_indices()
{
    curl -sX GET "localhost:9200/_cat/indices?v"
}

list_nodes()
{
    curl -sX GET "localhost:9200/_cat/nodes?v"
}

list_remote_info()
{
    curl -sX GET "localhost:9200/_remote/info?pretty"
}

list_shards()
{
    curl -sX GET "localhost:9200/_cat/shards?v"
}

list_tasks()
{
    curl -sX GET "localhost:9200/_tasks?pretty"
}

set_index_replicas()
{
    INDEX_NAME=${1:-sampleindex}
    REPLIC_NUM=${2:-2}
    curl -sX PUT "localhost:9200/$INDEX_NAME/_settings?pretty" \
      -H "Content-Type: application/json; charset=utf-8" \
      -d @- <<- \
	----------------------------------------------------------
	{
	  "settings": {
	    "index": {
	      "number_of_replicas": $REPLIC_NUM
	    }
	  }
	}
	----------------------------------------------------------
}

cmds()
{
    echo "Available sub-commands:"
    echo
   # TODO: Investigate -- unsure why I need $1 here (any value would do).
   # Without it the `source ...` fails in a strange way:
    bash -c "source '$SCRIPT_NAME' TRUE; compgen -A function" 2>/dev/null \
      | awk '!/cmds/ {sub(/^/, "- "); print}'
    echo
}

if [ $# = 0 ]; then
    echo "For available sub-commands:\n\n$0 cmds"
    exit 1
fi

CMD=$1

if [ $CMD != "cmds" ]; then
    shift
    set -x
fi

$CMD $@
